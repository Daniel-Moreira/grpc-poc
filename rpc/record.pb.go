// Code generated by protoc-gen-go. DO NOT EDIT.
// source: rpc/record.proto

package rpc

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Record_RecordStatus int32

const (
	Record_inprogress Record_RecordStatus = 0
	Record_completed  Record_RecordStatus = 1
	Record_absent     Record_RecordStatus = 2
	Record_failed     Record_RecordStatus = 3
)

var Record_RecordStatus_name = map[int32]string{
	0: "inprogress",
	1: "completed",
	2: "absent",
	3: "failed",
}

var Record_RecordStatus_value = map[string]int32{
	"inprogress": 0,
	"completed":  1,
	"absent":     2,
	"failed":     3,
}

func (x Record_RecordStatus) String() string {
	return proto.EnumName(Record_RecordStatus_name, int32(x))
}

func (Record_RecordStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_aad9a9e93120e704, []int{3, 0}
}

type Response struct {
	Ok                   bool     `protobuf:"varint,1,opt,name=ok,proto3" json:"ok,omitempty"`
	Record               *Record  `protobuf:"bytes,2,opt,name=record,proto3" json:"record,omitempty"`
	Error                *Error   `protobuf:"bytes,3,opt,name=error,proto3" json:"error,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Response) Reset()         { *m = Response{} }
func (m *Response) String() string { return proto.CompactTextString(m) }
func (*Response) ProtoMessage()    {}
func (*Response) Descriptor() ([]byte, []int) {
	return fileDescriptor_aad9a9e93120e704, []int{0}
}

func (m *Response) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Response.Unmarshal(m, b)
}
func (m *Response) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Response.Marshal(b, m, deterministic)
}
func (m *Response) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Response.Merge(m, src)
}
func (m *Response) XXX_Size() int {
	return xxx_messageInfo_Response.Size(m)
}
func (m *Response) XXX_DiscardUnknown() {
	xxx_messageInfo_Response.DiscardUnknown(m)
}

var xxx_messageInfo_Response proto.InternalMessageInfo

func (m *Response) GetOk() bool {
	if m != nil {
		return m.Ok
	}
	return false
}

func (m *Response) GetRecord() *Record {
	if m != nil {
		return m.Record
	}
	return nil
}

func (m *Response) GetError() *Error {
	if m != nil {
		return m.Error
	}
	return nil
}

type Error struct {
	Message              string   `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Error) Reset()         { *m = Error{} }
func (m *Error) String() string { return proto.CompactTextString(m) }
func (*Error) ProtoMessage()    {}
func (*Error) Descriptor() ([]byte, []int) {
	return fileDescriptor_aad9a9e93120e704, []int{1}
}

func (m *Error) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Error.Unmarshal(m, b)
}
func (m *Error) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Error.Marshal(b, m, deterministic)
}
func (m *Error) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Error.Merge(m, src)
}
func (m *Error) XXX_Size() int {
	return xxx_messageInfo_Error.Size(m)
}
func (m *Error) XXX_DiscardUnknown() {
	xxx_messageInfo_Error.DiscardUnknown(m)
}

var xxx_messageInfo_Error proto.InternalMessageInfo

func (m *Error) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type RecordID struct {
	Id                   int32    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RecordID) Reset()         { *m = RecordID{} }
func (m *RecordID) String() string { return proto.CompactTextString(m) }
func (*RecordID) ProtoMessage()    {}
func (*RecordID) Descriptor() ([]byte, []int) {
	return fileDescriptor_aad9a9e93120e704, []int{2}
}

func (m *RecordID) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RecordID.Unmarshal(m, b)
}
func (m *RecordID) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RecordID.Marshal(b, m, deterministic)
}
func (m *RecordID) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RecordID.Merge(m, src)
}
func (m *RecordID) XXX_Size() int {
	return xxx_messageInfo_RecordID.Size(m)
}
func (m *RecordID) XXX_DiscardUnknown() {
	xxx_messageInfo_RecordID.DiscardUnknown(m)
}

var xxx_messageInfo_RecordID proto.InternalMessageInfo

func (m *RecordID) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

type Record struct {
	Id                   *RecordID           `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Duration             string              `protobuf:"bytes,2,opt,name=duration,proto3" json:"duration,omitempty"`
	Status               Record_RecordStatus `protobuf:"varint,3,opt,name=status,proto3,enum=rpc.Record_RecordStatus" json:"status,omitempty"`
	Url                  string              `protobuf:"bytes,4,opt,name=url,proto3" json:"url,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *Record) Reset()         { *m = Record{} }
func (m *Record) String() string { return proto.CompactTextString(m) }
func (*Record) ProtoMessage()    {}
func (*Record) Descriptor() ([]byte, []int) {
	return fileDescriptor_aad9a9e93120e704, []int{3}
}

func (m *Record) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Record.Unmarshal(m, b)
}
func (m *Record) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Record.Marshal(b, m, deterministic)
}
func (m *Record) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Record.Merge(m, src)
}
func (m *Record) XXX_Size() int {
	return xxx_messageInfo_Record.Size(m)
}
func (m *Record) XXX_DiscardUnknown() {
	xxx_messageInfo_Record.DiscardUnknown(m)
}

var xxx_messageInfo_Record proto.InternalMessageInfo

func (m *Record) GetId() *RecordID {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *Record) GetDuration() string {
	if m != nil {
		return m.Duration
	}
	return ""
}

func (m *Record) GetStatus() Record_RecordStatus {
	if m != nil {
		return m.Status
	}
	return Record_inprogress
}

func (m *Record) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

func init() {
	proto.RegisterEnum("rpc.Record_RecordStatus", Record_RecordStatus_name, Record_RecordStatus_value)
	proto.RegisterType((*Response)(nil), "rpc.Response")
	proto.RegisterType((*Error)(nil), "rpc.Error")
	proto.RegisterType((*RecordID)(nil), "rpc.RecordID")
	proto.RegisterType((*Record)(nil), "rpc.Record")
}

func init() { proto.RegisterFile("rpc/record.proto", fileDescriptor_aad9a9e93120e704) }

var fileDescriptor_aad9a9e93120e704 = []byte{
	// 380 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x5c, 0x92, 0x4f, 0x4e, 0xf3, 0x30,
	0x10, 0xc5, 0xbf, 0x24, 0x5f, 0x43, 0x33, 0xfd, 0xa3, 0xe0, 0x6e, 0x42, 0x04, 0xa8, 0x84, 0x4d,
	0xc5, 0x22, 0x41, 0x61, 0xc7, 0x12, 0xb5, 0x42, 0x65, 0x69, 0x4e, 0xe0, 0x26, 0x26, 0xb2, 0x9a,
	0xc6, 0x96, 0xed, 0xb0, 0x41, 0x6c, 0xb8, 0x02, 0x27, 0xe0, 0x42, 0x6c, 0xb8, 0x02, 0x07, 0x41,
	0x71, 0xd2, 0x2a, 0xb0, 0x8a, 0xc7, 0xef, 0xcd, 0x2f, 0x6f, 0x34, 0x06, 0x5f, 0x8a, 0x2c, 0x91,
	0x34, 0xe3, 0x32, 0x8f, 0x85, 0xe4, 0x9a, 0x23, 0x47, 0x8a, 0x2c, 0x3c, 0x2d, 0x38, 0x2f, 0x4a,
	0x9a, 0x10, 0xc1, 0x12, 0x52, 0x55, 0x5c, 0x13, 0xcd, 0x78, 0xa5, 0x5a, 0x4b, 0x44, 0x60, 0x88,
	0xa9, 0x12, 0xbc, 0x52, 0x14, 0x4d, 0xc1, 0xe6, 0xdb, 0xc0, 0x9a, 0x5b, 0x8b, 0x21, 0xb6, 0xf9,
	0x16, 0x5d, 0x82, 0xdb, 0xe2, 0x02, 0x7b, 0x6e, 0x2d, 0x46, 0xe9, 0x28, 0x96, 0x22, 0x8b, 0xb1,
	0xb9, 0xc2, 0x9d, 0x84, 0xe6, 0x30, 0xa0, 0x52, 0x72, 0x19, 0x38, 0xc6, 0x03, 0xc6, 0xb3, 0x6a,
	0x6e, 0x70, 0x2b, 0x44, 0x17, 0x30, 0x30, 0x35, 0x0a, 0xe0, 0x68, 0x47, 0x95, 0x22, 0x05, 0x35,
	0x3f, 0xf1, 0xf0, 0xbe, 0x8c, 0xc2, 0x26, 0x45, 0x83, 0x5b, 0x2f, 0x9b, 0x14, 0x2c, 0x37, 0x86,
	0x01, 0xb6, 0x59, 0x1e, 0x7d, 0x5a, 0xe0, 0xb6, 0x22, 0x3a, 0x3b, 0x48, 0xa3, 0x74, 0xd2, 0x0b,
	0xb3, 0x5e, 0x36, 0x4e, 0x14, 0xc2, 0x30, 0xaf, 0xa5, 0x19, 0xcf, 0x24, 0xf6, 0xf0, 0xa1, 0x46,
	0xd7, 0xe0, 0x2a, 0x4d, 0x74, 0xad, 0x4c, 0xce, 0x69, 0x1a, 0xf4, 0xda, 0xbb, 0xcf, 0xa3, 0xd1,
	0x71, 0xe7, 0x43, 0x3e, 0x38, 0xb5, 0x2c, 0x83, 0xff, 0x06, 0xd4, 0x1c, 0xa3, 0x15, 0x8c, 0xfb,
	0x4e, 0x34, 0x05, 0x60, 0x95, 0x90, 0xbc, 0x90, 0x54, 0x29, 0xff, 0x1f, 0x9a, 0x80, 0x97, 0xf1,
	0x9d, 0x28, 0xa9, 0xa6, 0xb9, 0x6f, 0x21, 0x00, 0x97, 0x6c, 0x14, 0xad, 0xb4, 0x6f, 0x37, 0xe7,
	0x27, 0xc2, 0x4a, 0x9a, 0xfb, 0x4e, 0xfa, 0x61, 0xc1, 0xa4, 0xe3, 0x50, 0xf9, 0xcc, 0x32, 0x8a,
	0x96, 0xe0, 0xdd, 0x53, 0xdd, 0x0d, 0xf9, 0x7b, 0xb0, 0x70, 0x5f, 0xb6, 0x3b, 0x8a, 0x4e, 0xde,
	0xbe, 0xbe, 0xdf, 0xed, 0x19, 0x3a, 0x36, 0xfb, 0x6c, 0x77, 0xa0, 0x92, 0x17, 0x96, 0xbf, 0xa2,
	0x07, 0x18, 0xdf, 0x91, 0x6c, 0x5b, 0x8b, 0x0e, 0xd4, 0x5f, 0xd7, 0x5f, 0xcc, 0xb9, 0xc1, 0x04,
	0xd1, 0xac, 0x8f, 0x89, 0x37, 0xa6, 0xfd, 0xd6, 0xba, 0xda, 0xb8, 0xe6, 0x75, 0xdc, 0xfc, 0x04,
	0x00, 0x00, 0xff, 0xff, 0x7b, 0x8d, 0xba, 0xe4, 0x54, 0x02, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// RecordServiceClient is the client API for RecordService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type RecordServiceClient interface {
	GetRecord(ctx context.Context, in *RecordID, opts ...grpc.CallOption) (*Response, error)
	BackupRecord(ctx context.Context, in *Record, opts ...grpc.CallOption) (*Response, error)
}

type recordServiceClient struct {
	cc *grpc.ClientConn
}

func NewRecordServiceClient(cc *grpc.ClientConn) RecordServiceClient {
	return &recordServiceClient{cc}
}

func (c *recordServiceClient) GetRecord(ctx context.Context, in *RecordID, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/rpc.RecordService/GetRecord", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *recordServiceClient) BackupRecord(ctx context.Context, in *Record, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/rpc.RecordService/BackupRecord", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RecordServiceServer is the server API for RecordService service.
type RecordServiceServer interface {
	GetRecord(context.Context, *RecordID) (*Response, error)
	BackupRecord(context.Context, *Record) (*Response, error)
}

// UnimplementedRecordServiceServer can be embedded to have forward compatible implementations.
type UnimplementedRecordServiceServer struct {
}

func (*UnimplementedRecordServiceServer) GetRecord(ctx context.Context, req *RecordID) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRecord not implemented")
}
func (*UnimplementedRecordServiceServer) BackupRecord(ctx context.Context, req *Record) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BackupRecord not implemented")
}

func RegisterRecordServiceServer(s *grpc.Server, srv RecordServiceServer) {
	s.RegisterService(&_RecordService_serviceDesc, srv)
}

func _RecordService_GetRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RecordID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RecordServiceServer).GetRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.RecordService/GetRecord",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RecordServiceServer).GetRecord(ctx, req.(*RecordID))
	}
	return interceptor(ctx, in, info, handler)
}

func _RecordService_BackupRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Record)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RecordServiceServer).BackupRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.RecordService/BackupRecord",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RecordServiceServer).BackupRecord(ctx, req.(*Record))
	}
	return interceptor(ctx, in, info, handler)
}

var _RecordService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "rpc.RecordService",
	HandlerType: (*RecordServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetRecord",
			Handler:    _RecordService_GetRecord_Handler,
		},
		{
			MethodName: "BackupRecord",
			Handler:    _RecordService_BackupRecord_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rpc/record.proto",
}
